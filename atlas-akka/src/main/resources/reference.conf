
atlas.akka {

  # Regex that determines how the path tag value to use when mapping data about an
  # actor into a meter. There a should be a single capture group which will be the
  # path to report.
  path-pattern = "^akka://(?:[^/]+)/(?:system|user)/([^$\\d/]+).*?$"

  # List of additional actor classes to load
  actors = ${?atlas.akka.actors} [
    {
      name = "deadLetterStats"
      class = "com.netflix.atlas.akka.DeadLetterStatsActor"
    }
  ]

  # List of classes to load as API endpoints
  api-endpoints = ${?atlas.akka.api-endpoints} [
    "com.netflix.atlas.akka.HealthcheckApi",
    "com.netflix.atlas.akka.ConfigApi",
    "com.netflix.atlas.akka.StaticPages"
  ]

  # Settings for the StaticPages API
  static {
    # Default page to redirect to when hitting /
    default-page = "/ui"

    # For single-page javascript apps, a list of prefixes and the page they map to. Any path with
    # that prefix will return the same page.
    single-page-prefixes = [
      {
        # Path prefix to use. Should be single-level, just the name, with no '/'.
        prefix = "ui"

        # Resource to fetch when the prefix is requested. This is the resource in the classpath
        # not path on the server.
        resource = "www/index.html"
      }
    ]
  }

  # Name of the actor system
  name = "atlas"

  # Port to use for the web server
  port = 7101

  # How long to wait before giving up on bind
  bind-timeout = 5 seconds
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
    default-mailbox {
      mailbox-type = "com.netflix.atlas.akka.UnboundedMeteredMailbox"
      path-pattern = ${atlas.akka.path-pattern}
    }

    default-dispatcher {
      fork-join-executor {
        parallelism-factor = 8.0
      }
    }

    deployment {
      /request-handler {
        router = round-robin-pool
        nr-of-instances = 8
      }
    }
  }

  io {
    tcp {
      max-channels = 256000
      trace-logging = off
    }
  }
}

akka.http {
  client {
  }

  host-connection-pool {
    max-connections = 10
    max-retries = 0
    idle-timeout = 30 s
  }

  server {
    server-header = atlas/1.6

    # uncomment the next line for making this an HTTPS example
    # ssl-encryption = on
    idle-timeout = 30 s
    request-timeout = 10 s
    pipelining-limit = 20

    # Add the remote address into the request, useful for trying to figure out where traffic
    # is coming from.
    remote-address-header = on

    verbose-error-messages = on

  }

  parsing {
    uri-parsing-mode = relaxed
    max-uri-length = 4k
    max-content-length = 8m
  }
}
