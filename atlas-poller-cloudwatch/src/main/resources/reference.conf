
akka.actor.deployment {
  /poller/poller-cloudwatch/metrics-get {
    router = "round-robin-pool"
    nr-of-instances = 100
    pool-dispatcher {
      executor = "thread-pool-executor"
      thread-pool-executor {
        core-pool-size-min = 100
        core-pool-size-max = 100
        core-pool-size-factor = 1.0
      }
    }
  }

  /poller/poller-cloudwatch/metrics-list {
    router = "round-robin-pool"
    nr-of-instances = 2
    pool-dispatcher {
      executor = "thread-pool-executor"
      thread-pool-executor {
        core-pool-size-min = 1
        core-pool-size-max = 2
        core-pool-size-factor = 1.0
      }
    }
  }
}

atlas {

  poller {
    pollers = ${?atlas.poller.pollers} [
      {
        class = "com.netflix.atlas.cloudwatch.CloudWatchPoller"
        name = "cloudwatch"
      }
    ]
  }

  cloudwatch {

    // Batch size for flushing data back to the poller manager
    batch-size = 1000

    // How long to cache datapoints to avoid gaps
    cache-ttl = 20 minutes

    metrics-get-buffer-size = 10
    metrics-get-max-rate-per-second = 400

    // Class to use for mapping AWS dimensions to a tag map for use in Atlas
    tagger = {
      class = "com.netflix.atlas.cloudwatch.NetflixTagger"

      // Enables extracting a substring of a dimension value using a regex.
      // Only one capture group is supported, so only capture group 1 will
      // be used. If no match is found, the unaltered original value is
      // used.
      extractors = ${?atlas.cloudwatch.tagger.extractors} [
        {
          name = "LoadBalancer"
          directives = [
            {
              pattern = "^app/([^/]+)/.*"
              alias = "aws.alb"
            },
            {
              pattern = "^net/([^/]+)/.*"
              alias = "aws.nlb"
            }
          ]
        },
        {
          name = "TargetGroup"
          directives = [
            {
              pattern = "^targetgroup/([^/]+)/.*"
              alias = "aws.target"
            }
          ]
        }
      ]

      // Allows the dimension names to be mapped to values that are more
      // familiar internally at Netflix. If no explicit mapping is found,
      // then the value from cloudwatch will be used as is.
      mappings = [
        {
          name = "AutoScalingGroupName"
          alias = "nf.asg"
        },
        {
          name = "AvailabilityZone"
          alias = "nf.zone"
        },
        {
          name = "Region"
          alias = "aws.region"
        },
        {
          name = "LinkedAccount"
          alias = "aws.account"
        },
        {
          name = "Currency"
          alias = "aws.currency"
        },
        {
          name = "LoadBalancerName"
          alias = "aws.elb"
        },
        {
          name = "TopicName"
          alias = "aws.topic"
        },
        {
          name = "QueueName"
          alias = "aws.queue"
        },
        {
          name = "ServiceName"
          alias = "aws.service"
        },
        {
          name = "ServiceLimit"
          alias = "aws.limit"
        },
        {
          name = "BucketName"
          alias = "aws.bucket"
        },
        {
          name = "StorageType"
          alias = "aws.storage"
        },
        {
          name = "FunctionName"
          alias = "aws.function"
        },
        {
          name = "StreamName"
          alias = "aws.stream"
        },
        {
          name = "RuleName"
          alias = "aws.rule"
        },
        {
          name = "Resource"
          alias = "aws.resource"
        },
        {
          name = "Domain"
          alias = "aws.domain"
        },
        {
          name = "Operation"
          alias = "aws.op"
        },
        {
          name = "TableName"
          alias = "aws.table"
        },
        {
          name = "DomainName"
          alias = "aws.domain"
        },
        {
          name = "WorkflowTypeName"
          alias = "id"
        },
        {
          name = "WorkflowTypeVersion"
          alias = "aws.version"
        },
        {
          name = "ActivityTypeName"
          alias = "id"
        },
        {
          name = "ActivityTypeVersion"
          alias = "aws.version"
        },
        {
          name = "ClientId"
          alias = "aws.client"
        },
        {
          name = "CacheClusterId"
          alias = "aws.cache"
        },
        {
          name = "CacheNodeId"
          alias = "aws.node"
        },
        {
          name = "DBInstanceIdentifier"
          alias = "aws.dbname"
        },
        {
          name = "ClusterIdentifier"
          alias = "aws.redshift"
        },
        {
          name = "FileSystemId"
          alias = "aws.efs"
        },
        {
          name = "NodeID"
          alias = "nf.node"
        },
        {
          name = "FilterId"
          alias = "aws.filter"
        },
        {
          name = "NatGatewayId"
          alias = "aws.gateway"
        },
        {
          name = "Action"
          alias = "aws.action"
        },
        {
          name = "TransitGateway"
          alias = "aws.tgw"
        },
      ]

      // Tags that should get applied to all metrics from cloudwatch.
      common-tags = [
        {
          key = "nf.region"
          value = "us-west-2"
        }
      ]

      // When using the netflix mapper, this setting specifies which keys should get
      // processed via frigga to extract tags based on the internal naming conventions.
      netflix-keys = [
        "nf.asg",
        "aws.elb"
      ]
    }

    // Categories to load. The name will be used to load another config block:
    // atlas.cloudwatch.${name}
    //
    // ec2 is excluded by default because at Netflix it tends to add a lot of load in terms of
    // CW calls and offers little value over internal system metrics.
    categories = [
      "alb",
      "alb-zone",
      "alb-tg-zone",
      "api-gateway",
      "billing",
      "dynamodb-table-1m",
      "dynamodb-table-5m",
      "dynamodb-table-ops",
      //"ec2",
      "ec2-api",
      "ec2-credit",
      "efs",
      "elasticache",
      "elb",
      "es",
      "events",
      "kinesis",
      "lambda",
      "lambda-fn-res",
      "nat-gateway",
      "nlb",
      "nlb-zone",
      "nlb-tg-zone",
      "rds",
      "redshift",
      "s3",
      "s3-request",
      "sns",
      "sqs",
      "tgw",
      //"trustedadvisor",
      "workflow",
      "workflow-activity"
    ]

  }
}

include "alb.conf"
include "api-gateway.conf"
include "billing.conf"
include "dynamodb.conf"
include "ec2.conf"
include "elasticache.conf"
include "elb.conf"
include "efs.conf"
include "es.conf"
include "events.conf"
include "kinesis.conf"
include "lambda.conf"
include "nat-gateway.conf"
include "nlb.conf"
include "rds.conf"
include "redshift.conf"
include "s3.conf"
include "s3-request.conf"
include "sns.conf"
include "sqs.conf"
include "swf.conf"
include "tgw.conf"
include "trustedadvisor.conf"
